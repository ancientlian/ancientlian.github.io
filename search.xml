<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>图书小项目理解Django（二）</title>
      <link href="/2018/12/18/%E5%9B%BE%E4%B9%A6%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3Django%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/12/18/%E5%9B%BE%E4%B9%A6%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3Django%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>接上文：</p><h2 id="信息展示页"><a href="#信息展示页" class="headerlink" title="信息展示页"></a>信息展示页</h2><h3 id="设计url"><a href="#设计url" class="headerlink" title="设计url"></a>设计url</h3><p>在views里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示图书信息'''</span></span><br><span class="line">    <span class="comment"># 1. 查询出所有的图书信息</span></span><br><span class="line">    books = BookInfo.objects.all()</span><br><span class="line">    <span class="comment"># 2. 设置模板，使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request , <span class="string">'booktest/index.html'</span> , &#123;<span class="string">'books'</span>:books&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="模板的创建"><a href="#模板的创建" class="headerlink" title="模板的创建"></a>模板的创建</h3><p>新建空directory名为tempates</p><p>在setting里的<strong>TEMPLATES</strong>处配置设定模板：<code>&#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)],#设置模板目录</code></p><p>新建app同名文件夹，内建index.html</p><h3 id="配置urls"><a href="#配置urls" class="headerlink" title="配置urls"></a>配置urls</h3><p>在文件bookM内配置urls为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class="line">    url(<span class="string">r'^'</span> , include(<span class="string">'booktest.urls'</span>)),   <span class="comment">#包含boottest的urls文件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在app文件（也就是booktest）内新建urls.py，其内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^index$'</span> , views.index),  <span class="comment">#图书信息页面</span></span><br><span class="line">    url(<span class="string">r'^create$'</span> , views.create),<span class="comment">#图书新增</span></span><br><span class="line">    url(<span class="string">r'^delete(\d+)$'</span>,views.delete)<span class="comment">#图书删除</span></span><br><span class="line">    <span class="comment">#   （\d+）的含义：让django进行地址匹配的时候能作为参数传递给views视图</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="设计html"><a href="#设计html" class="headerlink" title="设计html"></a>设计html</h3><p>编写index.html文件，内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/create"</span>&gt;</span>新增一本图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;#如果create不加前面的/,而url里面刚好又在后面加了/,例如：r'^index/$'，#&#125;</span><br><span class="line">&#123;#则会导致a标签访问的是http://127.0.0.1:8000/index/create，#&#125;</span><br><span class="line">&#123;#而不是我们想要的http://127.0.0.1:8000/create，这样就会产生页面不存在的访问错误#&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;----<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/delete&#123;&#123; book.id &#125;&#125;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p>在views里编写业务逻辑</p><h3 id="新增一本书："><a href="#新增一本书：" class="headerlink" title="新增一本书："></a>新增一本书：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''新增加一本图书'''</span></span><br><span class="line">    <span class="comment"># 1. 创建Bookinfo对象</span></span><br><span class="line">    b = BookInfo()</span><br><span class="line">    b.btitle = <span class="string">'流星蝴蝶剑'</span></span><br><span class="line">    b.bpub_date = date(<span class="number">1990</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2. 保存进数据库</span></span><br><span class="line">    b.save()</span><br><span class="line">    <span class="comment"># 3. 返回应答，让浏览器返回首页，也就是再访问/index,重定向</span></span><br><span class="line">    <span class="comment">#页面重定向：服务器不返回页面，而是告诉浏览器再去请求别的url地址</span></span><br><span class="line">    <span class="comment">#return HttpResponse('添加成功okokokok!!')  #这里不是给浏览器返回一个内容</span></span><br><span class="line">    <span class="keyword">return</span>  HttpResponseRedirect(<span class="string">'/index'</span>)</span><br></pre></td></tr></table></figure><h3 id="删除一本书："><a href="#删除一本书：" class="headerlink" title="删除一本书："></a>删除一本书：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(request , bid)</span>:</span></span><br><span class="line">    <span class="string">'''删除点击的图书'''</span></span><br><span class="line">    <span class="comment"># 1. 通过bid获取图书的对象</span></span><br><span class="line">    book = BookInfo.objects.get(id = bid)</span><br><span class="line">    <span class="comment"># 2. 删除</span></span><br><span class="line">    book.delete()</span><br><span class="line">    <span class="comment"># 3. 重定向，让浏览器重新访问/index</span></span><br><span class="line">    <span class="comment">#return HttpResponseRedirect('/index')</span></span><br><span class="line">    <span class="comment"># 上述函数可以简写为</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span><br></pre></td></tr></table></figure><p>附views页全代码及效果展示</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图书小项目理解Django（一）</title>
      <link href="/2018/12/18/%E5%9B%BE%E4%B9%A6%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3Django%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/12/18/%E5%9B%BE%E4%B9%A6%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3Django%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在Django项目中，我们会对扑面而来的众多框架内置生成文件望而生畏，这里通过一个简单的图书馆管理小例子来简单说明Django内置各部分的作用，便于快速理解Django</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>进入虚拟环境（<a href="">如何进入虚拟环境</a>）    </p><p>终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject bookM#创建工程</span><br><span class="line">cd bookM#进入到项目文件</span><br><span class="line">python manage.py startapp booktest#创建app</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="建立模型类"><a href="#建立模型类" class="headerlink" title="建立模型类"></a>建立模型类</h2><p>这样就已经基本创建好项目所用，我使用的IDE是Pycharm<br>打开后我们进入到booktest的models开始创建模型类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''图书模型类'''</span></span><br><span class="line">    <span class="comment">#图书名称</span></span><br><span class="line">    btitle = models.CharField(max_length = <span class="number">20</span>)</span><br><span class="line">    <span class="comment">#出版日期</span></span><br><span class="line">    bpub_date = models.DateField()</span><br><span class="line">    <span class="comment">#阅读量</span></span><br><span class="line">    bread = models.IntegerField(default = <span class="number">0</span>)</span><br><span class="line">    <span class="comment">#评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default = <span class="number">0</span>)</span><br><span class="line">    <span class="comment">#删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''英雄人物模型类'''</span></span><br><span class="line">    hname = models.CharField(max_length = <span class="number">20</span>)</span><br><span class="line">    <span class="comment">#性别</span></span><br><span class="line">    hgender = models.BooleanField(default = <span class="keyword">False</span>)</span><br><span class="line">    <span class="comment">#备注</span></span><br><span class="line">    hcomment = models.CharField(max_length = <span class="number">200</span>)</span><br><span class="line">    <span class="comment">#关系属性</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">'Bookinfo'</span>)</span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>现在类对应的表还没有，所以还需要迁移。</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p><strong>第一步：</strong>终端输入：<code>python manage.py makemigrations</code></p><p><strong>第二步：</strong>生成迁移文件之后输入<code>python manage.py migrate</code>，根据迁移文件生成mysql的表</p><p>你可以在终端中通过mysql简单查看是否输入进去导入成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use bookM；</span><br><span class="line">mysql&gt; show tables；</span><br><span class="line">--其中有--</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_bookM            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| booktest_bookinfo          |</span><br><span class="line">| booktest_heroinfo          |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+----------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc booktest_bookinfo；</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field     | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id        | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| btitle    | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| bpub_date | date        | NO   |     | NULL    |                |</span><br><span class="line">| bread     | int(11)     | NO   |     | NULL    |                |</span><br><span class="line">| bcomment  | int(11)     | NO   |     | NULL    |                |</span><br><span class="line">| isDelete  | tinyint(1)  | NO   |     | NULL    |                |</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc booktest_heroinfo;</span><br><span class="line">+----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field    | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+----------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| hname    | varchar(20)  | NO   |     | NULL    |                |</span><br><span class="line">| hgender  | tinyint(1)   | NO   |     | NULL    |                |</span><br><span class="line">| hcomment | varchar(200) | NO   |     | NULL    |                |</span><br><span class="line">| isDelete | tinyint(1)   | NO   |     | NULL    |                |</span><br><span class="line">| hbook_id | int(11)      | NO   | MUL | NULL    |                |</span><br><span class="line">+----------+--------------+------+-----+---------+----------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">---添加一点数据---</span><br><span class="line">mysql&gt;insert into booktest_bookinfo(btitle,bpub_date,bread,bcomment,isDelete) values</span><br><span class="line">(&apos;射雕英雄传&apos;,&apos;1980-5-1&apos;,12,34,0)；</span><br><span class="line">mysql&gt;insert into booktest_heroinfo(hname,hgender,hbook_id,hcomment,isDelete) values</span><br><span class="line">(&apos;郭靖&apos;,1,1,&apos;降龙十八掌&apos;,0),</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>转下文</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis基础认识</title>
      <link href="/2018/12/14/Redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
      <url>/2018/12/14/Redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>在学习的过程当中，我们或多或少的都会接触到redis，比如说在我们的web项目中，如果想添加历史浏览记录，那肯定要用到数据库，但如果直接上手mysql就显得的过于大材小用了，此时redis也就应运而生。不过首先需要介绍一下什么是nosql。</p><h2 id="NoSQL介绍"><a href="#NoSQL介绍" class="headerlink" title="NoSQL介绍"></a>NoSQL介绍</h2><p><strong>NoSQL：一类新出现的数据库（not only sql），特点有：</strong></p><ul><li><strong>不支持sql语法</strong></li><li>存储结构和传统关系型数据库（比如mysql，oracle，sql server）中的关系表不同，nosql中存储的数据都是<strong>K-V</strong>形式。而Redis 就是一个高性能的key-value数据库。</li><li>NoSQL的世界里没有一种通用的语言，每种NoSQL数据库都有自己的api和语法，以及擅长的业务场景</li><li>NoSQL产品种类比如有：</li><li><ul><li>Mongodb</li><li>Redis</li><li>Hbase hadoop</li><li>Cassandra hadoop<a id="more"></a><strong>NoSQL和SQL数据库比较：</strong></li></ul></li><li><p>适用场景不同：sql数据库适合用于关系特别复杂的数据查询场景，nosql相反</p></li><li>“事务”特性的支持：sql对事务的支持非常完善，而nosql基本不支持事务。（注：<strong>“事务”</strong>：一组sql操作，要么都成功，要么都失败）</li><li>两者在不断地取长补短，呈现融合趋势</li></ul><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><ul><li>Redis是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</li><li>Redis是一个key-value<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">存储系统</a>。和Memcached类似，它支持存储的value类型相对更多，包括<strong>string(字符串)、list(<a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</strong>。（来源：百度词条）</li></ul><h2 id="Redis特性"><a href="#Redis特性" class="headerlink" title="Redis特性"></a>Redis特性</h2><ul><li>与其他key-value缓存产品一样：支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>同时提供list,set,zset,hash等数据结构的存储。</li><li>支持数据的<strong>备份</strong>，即master-slave模式的数据备份</li></ul><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 - Redis能读的速度是110000次/s，写的速度为81000次/s。</li><li>丰富的数据类型 - 支持<strong>二进制案例</strong>的 String，Lists，Hashes，Sets 及 Orderd Sets 数据类型操作。</li><li>原子 - Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h2><ul><li>用来做<strong>缓存</strong>（ehcache/memcached）–redis的所有数据是放在内存中的（内存数据库）</li><li>可以在某些特定应用场景下替代传统数据库 – 比如社交应用</li><li>在一些大型系统，特定功能：session共享，购物车</li><li>也有比如排行榜应用，取TOP N操作。</li><li>按照用户投票和时间排序等等。</li><li>只要你有丰富的想象力，redis有无限的惊喜</li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://redis.io/" target="_blank" rel="noopener">redis官方网站</a></li><li><a href="http://www.redis.cn/" target="_blank" rel="noopener">redis中文官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>论-JavaScript、jQuery、AJAX、JSON及四者关系</title>
      <link href="/2018/12/13/%E8%AE%BA-JavaScript%E3%80%81jQuery%E3%80%81AJAX%E3%80%81JSON%E5%8F%8A%E5%9B%9B%E8%80%85%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/12/13/%E8%AE%BA-JavaScript%E3%80%81jQuery%E3%80%81AJAX%E3%80%81JSON%E5%8F%8A%E5%9B%9B%E8%80%85%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>  在学习前端的过程中，经常被各种各样的语法名词搞混，这里简单归纳下容易混淆的四种名词含义，JavaScript、jQuery、AJAX、JSON 以及这四者之间的关系。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript（简称js）是一种主要运行于浏览器中的<strong>弱类型的动态脚本语言</strong>，可以用来实现网页上的一些高级功能，如数据验证处理、页面动态效果、定时任务、与用户交互、发送/接收服务器端数据等等。</p><p>弱类型指的是js中的变量在参与运算的时候可以根据实际需要动态转换类型。与之相对应的是强类型语言——变量一般不允许自动转换类型（某些强类型语言的字符串连接操作除外），如果参与运算、调用时不符合要求的类型，则会在编译阶段报错，比如说java各种复杂的变量声明。<br><a id="more"></a><br>而因为JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。对于传统编程来说，则是会在执行前对所有代码进行编译。<br>又因为他弱语言的特性，经常见到var出一切变量！</p><p>简单的js示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;这是标题&lt;/h1&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;Hello word！&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;这是另一个段落。&lt;/p&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p><strong>jQuery是js的一个工具库</strong>，由John Resig在2006年发布。<br>意思就是基于js的一种实用工具。在jQuery出现之前，在js程序中获取元素节点比较麻烦，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure><p>之后John Resig根据css选择器编写了jQuery选择器，并对选择器的规则进行了扩充，从而让元素查找变得非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>)</span><br></pre></td></tr></table></figure><p>除此之外还有链式操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div.con'</span>)</span><br><span class="line">    .height(<span class="number">100</span>)</span><br><span class="line">    .show();</span><br></pre></td></tr></table></figure><p>这种连续调用可以让代码书写更加简洁，也印证了jQuery自己的口号：<strong>write less, do more</strong></p><p>此外，jQuery还提供了浏览器兼容、样式读写、事件绑定与执行、动画等特性，后来又加入了ajax、promise等，再加上方便的插件编写机制，对整个js的生态圈产生了重大的影响，可以说是js历史上影响力最大的一个库。</p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>ajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需刷新页面、使用js<strong>与服务器进行交互的一种技术</strong>。</p><p>有时候会有这样一种需求：只希望更改页面上的一个区域。然而在从前的技术框架内只能刷新整个页面，带来的后果是：①需要重新传输整个页面，服务器端与客户端的流量消耗都会比较大；②如果是动态页，服务器端需要重新生成整个页面，即使是那些客户原本不想要刷新的区域，增大了服务器的负担。</p><p>ajax的基本流程可以概括为：页面上js脚本实例化一个XMLHttpRequest对象，设置好服务器端的url、必要的查询参数、回调函数之后，向服务器发出请求，服务器在处理请求之后将处理结果返回给页面，触发事先绑定的回调函数。这样，页面脚本如果想要改变一个区域的内容，只需要通过ajax向服务器获取与该区域有关的少量数据，在回调函数中将该区域的内容替换掉即可，不需要刷新整个页面。</p><p>XMLHttpRequest在发送请求的时候，有两种方式：同步与异步。这里就不细谈了。</p><p>简单的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">'/user/ajaxshow'</span>,       <span class="comment">//规定发送请求的 URL。默认是当前页面。</span></span><br><span class="line">  method:<span class="string">'GET'</span>,               <span class="comment">//与type一模一样，只是type对于目前jQuery的版本全部兼容，method在jQuery1.9以后的版本</span></span><br><span class="line">  contentType:<span class="string">'application/json'</span>,     <span class="comment">//发送数据到服务器时所使用的内容类型。</span></span><br><span class="line">  dataType:<span class="string">'json'</span>,                <span class="comment">//预期的服务器响应的数据类型。</span></span><br><span class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**在此进行数据处理*/</span></span><br><span class="line">    alert(data);                    </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON全称JavaScript Object Notation（js对象标记法），由Douglas Crockford在2002年发现并制定了标准。JSON是基于JavaScript的，是JavaScript的一个<strong>子集</strong>。JSON是用JavaScript语法来表示数据的一种轻量级语言。</p><p>从ajax的命名中我们就可以看到，数据交换是通过XML格式进行的。在ajax刚出现的时候，绝大多数应用都是采用XML格式，也有少数使用纯文本的。但是XML格式有一个缺点，就是文档构造复杂，需要传输比较多的字节数。在这种情况下，JSON的轻便性逐渐得到重视，后来替代XML成为ajax最主要的数据传输格式。可以举个简单的例子比较一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Title1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span>&gt;</span>content1<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Title2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span>&gt;</span>content2<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"article"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Article Title1"</span>,</span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"content1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Article Title2"</span>,</span><br><span class="line">      <span class="attr">"content"</span>: <span class="string">"content2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说到js自身，对于对象构造有两种方法：基于对象的完整写法，字面量表示法。前者如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.title = <span class="string">"title1"</span>;</span><br><span class="line">obj.content = <span class="string">"content1"</span>;</span><br></pre></td></tr></table></figure><p>而与之对应的字面量表示法则写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    title: <span class="string">"title1"</span>,</span><br><span class="line">    content: <span class="string">"content1"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以明显看出字面量表示法要简洁得多。而JSON基本就是字面量表示法的一个子集，除了强制要求键与字符串类型的值必须用双引号包起之外，它剔除了undefined、function等类型，也不包括浏览器内置对象类型（如Date、RegExp等），是基于文本的、比较纯粹的数据表示方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下就是，js老大哥，jQuery是他手头最好用的工具（之一），AJAX是基于js的一门页面部分刷新技术，JSON是js部分语法的升级优化版。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>卸载win10预装</title>
      <link href="/2018/10/13/%E7%AE%80%E5%8D%95%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89win10%E9%A2%84%E8%A3%85%E5%BA%94%E7%94%A8/"/>
      <url>/2018/10/13/%E7%AE%80%E5%8D%95%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89win10%E9%A2%84%E8%A3%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>一行命令删除所有win10预装应用，解决win10烦恼！！</p><p>方法和步骤：<br>1、搜索栏中输入“PowerShell”，在搜索结果中右键选择“以管理员身份运行”PowerShell。<br>2、在PowerShell窗口中，输入“<code>Get-AppXPackage | Remove-AppxPackage</code>”回车确认，然后等待系统自动将当前账户中的所有预装应用都删除即可。<br>3、如果要卸载某个应用，只需输入对应命令，按下回车键即可删除。</p>]]></content>
      
      
      <categories>
          
          <category> 电脑技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的博客之路</title>
      <link href="/2017/12/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
      <url>/2017/12/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>说到博客，仿佛已经是多少年代以前的产物了。但是对于步入互联网行业的我来说，博客似乎占用了生活中很大一部分的，刚开始入门碰到各种各样的问题，百度出来很大一部分都是各个勤劳的博客主解决了问题，这也使得我在成长的道路上遇到各种与我或者我们一起在前行的人们，尽管时过境迁，他们或为销声匿迹或者也开启了自己的博客主之路，在被评论为大神时候，回想起的是当初稚嫩的自己第一次配置好IDE的满足，第一次在教程下print出Hello Word的喜悦，或者是写出第一篇博客的忐忑，以及无人问津的失落。</p><p>说起我为什么开始写博客，当时只是因为在同学的一句话下便萌生了写博客的心思，因为我也是一个喜欢折腾的人，那时候左思右想是在CSDN写好呢还是在博客园写下第一篇历史性的Hello。<a id="more"></a>最后还是想装一下的选择了hexo框架搭建的Github Page。当时hexo s看到自己博客终于显示出来得时候，内心是充满激动地，最后又花了一天零零散散的配置比如动态背景，live2d等等花里胡哨的东西，本想着与别人分享一下我成功的喜悦，但是，又想到这其实并没有什么大不了的，不是么，都没有什么内容充实，于是便就此搁浅。</p><p>为什么要写博客？这能说出好多好多的理由，但其实最让我警醒就是，当今互联网产生的<strong>碎边化阅读</strong>。时常浏览知乎的时候，我就感受到了，我看了很多很多的知识，到头来其实所剩无几，更别谈消化吸收了多少东西。博客就是一个很好的整理知识的途径，一来记录自己所学，二来记录自己所思。在其之后就是每个人不一样的小心思了，我也想成为别人口中的大V，或者是我想认识一些同样圈子的人，或者我想为简历添加重量级的一笔等等不一而足。</p><p>其实本来写博客就不会产生不良影响不是么，甚至是他还会给你带来很多的好处，可能出现的问题那其实都足以被其优点掩盖，那你还有什么理由不去写他。</p><p>解决了为什么要去写的问题，剩下来的就是怎么写了。就像刘未鹏所说的那样，<strong>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</strong>其实就这么简单，如果你的确在社会中，或者是在校园里，那你总是有每天学到的东西。可能是你突然冒出来的一个疑问，你可以先记录下来然后顺藤摸瓜的就能拉出来好多相关的知识，我想各行各业的翘楚们所涵盖的内容，都足以使你发表一篇论文了。</p><p>时间总会说明一切的问题，慢慢的博客他就会成为你生活里一位挚友，你向他述说你收获的喜悦，向他抒发文艺的情绪，甚至开始写起小说等等。我也祝愿每一位有意无意看到的人都能有所得，因为，这就是生活啊。</p><p>这里贴上刘未鹏的《为什么你应该（从现在开始就）写博客》<br><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 起点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>刚开始的一小步</title>
      <link href="/2017/12/10/%E5%88%9A%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AD%A5/"/>
      <url>/2017/12/10/%E5%88%9A%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>如往常一样，这只是一生中一样普通的一天。<br>                    –欢迎来到博客： <a href="https://ancientlian.github.io/" target="_blank" rel="noopener">https://ancientlian.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 起点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/12/10/hello-world/"/>
      <url>/2017/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
