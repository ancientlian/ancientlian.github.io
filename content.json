{"meta":{"title":"Ancientlian的博客","subtitle":null,"description":"众所周知，这是一个博客","author":"Ancientlian","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-12-11T08:02:07.000Z","updated":"2018-12-11T08:02:07.617Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-12-11T04:56:18.000Z","updated":"2018-12-11T08:00:16.211Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-12-11T04:51:12.000Z","updated":"2018-12-11T08:00:18.984Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"图书小项目理解Django（二）","slug":"图书小项目理解Django（二）","date":"2018-12-18T13:36:53.000Z","updated":"2018-12-19T14:59:37.325Z","comments":true,"path":"2018/12/18/图书小项目理解Django（二）/","link":"","permalink":"http://yoursite.com/2018/12/18/图书小项目理解Django（二）/","excerpt":"接上文： 信息展示页设计url在views里面： 123456789from django.shortcuts import render from booktest.models import BookInfodef index(request): '''显示图书信息''' # 1. 查询出所有的图书信息 books = BookInfo.objects.all() # 2. 设置模板，使用模板 return render(request , 'booktest/index.html' , &#123;'books':books&#125;)","text":"接上文： 信息展示页设计url在views里面： 123456789from django.shortcuts import render from booktest.models import BookInfodef index(request): '''显示图书信息''' # 1. 查询出所有的图书信息 books = BookInfo.objects.all() # 2. 设置模板，使用模板 return render(request , 'booktest/index.html' , &#123;'books':books&#125;) 模板的创建新建空directory名为tempates 在setting里的TEMPLATES处配置设定模板：&#39;DIRS&#39;: [os.path.join(BASE_DIR,&#39;templates&#39;)],#设置模板目录 新建app同名文件夹，内建index.html 配置urls在文件bookM内配置urls为： 1234urlpatterns = [ url(r'^admin/', include(admin.site.urls)), url(r'^' , include('booktest.urls')), #包含boottest的urls文件] 在app文件（也就是booktest）内新建urls.py，其内容为： 123456789from django.conf.urls import urlfrom booktest import viewsurlpatterns = [ url(r'^index$' , views.index), #图书信息页面 url(r'^create$' , views.create),#图书新增 url(r'^delete(\\d+)$',views.delete)#图书删除 # （\\d+）的含义：让django进行地址匹配的时候能作为参数传递给views视图] 设计html编写index.html文件，内容为： 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;图书信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=\"/create\"&gt;新增一本图书&lt;/a&gt;&#123;#如果create不加前面的/,而url里面刚好又在后面加了/,例如：r'^index/$'，#&#125;&#123;#则会导致a标签访问的是http://127.0.0.1:8000/index/create，#&#125;&#123;#而不是我们想要的http://127.0.0.1:8000/create，这样就会产生页面不存在的访问错误#&#125;&lt;ul&gt; &#123;% for book in books %&#125; &lt;li&gt;&#123;&#123; book.btitle &#125;&#125;----&lt;a href=\"/delete&#123;&#123; book.id &#125;&#125;\"&gt;删除&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 业务逻辑在views里编写业务逻辑 新增一本书：123456789101112def create(request): '''新增加一本图书''' # 1. 创建Bookinfo对象 b = BookInfo() b.btitle = '流星蝴蝶剑' b.bpub_date = date(1990,1,1) # 2. 保存进数据库 b.save() # 3. 返回应答，让浏览器返回首页，也就是再访问/index,重定向 #页面重定向：服务器不返回页面，而是告诉浏览器再去请求别的url地址 #return HttpResponse('添加成功okokokok!!') #这里不是给浏览器返回一个内容 return HttpResponseRedirect('/index') 删除一本书：12345678910def delete(request , bid): '''删除点击的图书''' # 1. 通过bid获取图书的对象 book = BookInfo.objects.get(id = bid) # 2. 删除 book.delete() # 3. 重定向，让浏览器重新访问/index #return HttpResponseRedirect('/index') # 上述函数可以简写为 return redirect('/index') 附views页全代码及效果展示","categories":[{"name":"django","slug":"django","permalink":"http://yoursite.com/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"http://yoursite.com/tags/django/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"图书小项目理解Django（一）","slug":"图书管理小项目理解django","date":"2018-12-18T13:36:53.000Z","updated":"2018-12-19T14:54:56.403Z","comments":true,"path":"2018/12/18/图书管理小项目理解django/","link":"","permalink":"http://yoursite.com/2018/12/18/图书管理小项目理解django/","excerpt":"在Django项目中，我们会对扑面而来的众多框架内置生成文件望而生畏，这里通过一个简单的图书馆管理小例子来简单说明Django内置各部分的作用，便于快速理解Django 前期准备进入虚拟环境（如何进入虚拟环境） 终端输入： 123django-admin startproject bookM #创建工程cd bookM #进入到项目文件python manage.py startapp booktest #创建app","text":"在Django项目中，我们会对扑面而来的众多框架内置生成文件望而生畏，这里通过一个简单的图书馆管理小例子来简单说明Django内置各部分的作用，便于快速理解Django 前期准备进入虚拟环境（如何进入虚拟环境） 终端输入： 123django-admin startproject bookM #创建工程cd bookM #进入到项目文件python manage.py startapp booktest #创建app 建立模型类这样就已经基本创建好项目所用，我使用的IDE是Pycharm打开后我们进入到booktest的models开始创建模型类： 123456789101112131415161718192021222324252627from django.db import models# Create your models here.class BookInfo(models.Model): '''图书模型类''' #图书名称 btitle = models.CharField(max_length = 20) #出版日期 bpub_date = models.DateField() #阅读量 bread = models.IntegerField(default = 0) #评论量 bcomment = models.IntegerField(default = 0) #删除标记 isDelete = models.BooleanField(default=False)class HeroInfo(models.Model): '''英雄人物模型类''' hname = models.CharField(max_length = 20) #性别 hgender = models.BooleanField(default = False) #备注 hcomment = models.CharField(max_length = 200) #关系属性 hbook = models.ForeignKey('Bookinfo') # 删除标记 isDelete = models.BooleanField(default=False) 现在类对应的表还没有，所以还需要迁移。 迁移第一步：终端输入：python manage.py makemigrations 第二步：生成迁移文件之后输入python manage.py migrate，根据迁移文件生成mysql的表 你可以在终端中通过mysql简单查看是否输入进去导入成功 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253mysql&gt; use bookM；mysql&gt; show tables；--其中有--+----------------------------+| Tables_in_bookM |+----------------------------+| auth_group || auth_group_permissions || auth_permission || auth_user || auth_user_groups || auth_user_user_permissions || booktest_bookinfo || booktest_heroinfo || django_admin_log || django_content_type || django_migrations || django_session |+----------------------------+12 rows in set (0.00 sec)mysql&gt; desc booktest_bookinfo；+-----------+-------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-----------+-------------+------+-----+---------+----------------+| id | int(11) | NO | PRI | NULL | auto_increment || btitle | varchar(20) | NO | | NULL | || bpub_date | date | NO | | NULL | || bread | int(11) | NO | | NULL | || bcomment | int(11) | NO | | NULL | || isDelete | tinyint(1) | NO | | NULL | |+-----------+-------------+------+-----+---------+----------------+6 rows in set (0.01 sec)mysql&gt; desc booktest_heroinfo;+----------+--------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+--------------+------+-----+---------+----------------+| id | int(11) | NO | PRI | NULL | auto_increment || hname | varchar(20) | NO | | NULL | || hgender | tinyint(1) | NO | | NULL | || hcomment | varchar(200) | NO | | NULL | || isDelete | tinyint(1) | NO | | NULL | || hbook_id | int(11) | NO | MUL | NULL | |+----------+--------------+------+-----+---------+----------------+6 rows in set (0.00 sec)---添加一点数据---mysql&gt;insert into booktest_bookinfo(btitle,bpub_date,bread,bcomment,isDelete) values(&apos;射雕英雄传&apos;,&apos;1980-5-1&apos;,12,34,0)；mysql&gt;insert into booktest_heroinfo(hname,hgender,hbook_id,hcomment,isDelete) values(&apos;郭靖&apos;,1,1,&apos;降龙十八掌&apos;,0),--- 转下文","categories":[{"name":"django","slug":"django","permalink":"http://yoursite.com/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"http://yoursite.com/tags/django/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Redis基础认识","slug":"Redis基础认识","date":"2018-12-14T13:36:53.000Z","updated":"2018-12-19T14:55:52.820Z","comments":true,"path":"2018/12/14/Redis基础认识/","link":"","permalink":"http://yoursite.com/2018/12/14/Redis基础认识/","excerpt":"在学习的过程当中，我们或多或少的都会接触到redis，比如说在我们的web项目中，如果想添加历史浏览记录，那肯定要用到数据库，但如果直接上手mysql就显得的过于大材小用了，此时redis也就应运而生。不过首先需要介绍一下什么是nosql。 NoSQL介绍NoSQL：一类新出现的数据库（not only sql），特点有： 不支持sql语法 存储结构和传统关系型数据库（比如mysql，oracle，sql server）中的关系表不同，nosql中存储的数据都是K-V形式。而Redis 就是一个高性能的key-value数据库。 NoSQL的世界里没有一种通用的语言，每种NoSQL数据库都有自己的api和语法，以及擅长的业务场景 NoSQL产品种类比如有： Mongodb Redis Hbase hadoop Cassandra hadoop","text":"在学习的过程当中，我们或多或少的都会接触到redis，比如说在我们的web项目中，如果想添加历史浏览记录，那肯定要用到数据库，但如果直接上手mysql就显得的过于大材小用了，此时redis也就应运而生。不过首先需要介绍一下什么是nosql。 NoSQL介绍NoSQL：一类新出现的数据库（not only sql），特点有： 不支持sql语法 存储结构和传统关系型数据库（比如mysql，oracle，sql server）中的关系表不同，nosql中存储的数据都是K-V形式。而Redis 就是一个高性能的key-value数据库。 NoSQL的世界里没有一种通用的语言，每种NoSQL数据库都有自己的api和语法，以及擅长的业务场景 NoSQL产品种类比如有： Mongodb Redis Hbase hadoop Cassandra hadoop NoSQL和SQL数据库比较： 适用场景不同：sql数据库适合用于关系特别复杂的数据查询场景，nosql相反 “事务”特性的支持：sql对事务的支持非常完善，而nosql基本不支持事务。（注：“事务”：一组sql操作，要么都成功，要么都失败） 两者在不断地取长补短，呈现融合趋势 Redis简介 Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。 Redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。（来源：百度词条） Redis特性 与其他key-value缓存产品一样：支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 同时提供list,set,zset,hash等数据结构的存储。 支持数据的备份，即master-slave模式的数据备份 Redis 优势 性能极高 - Redis能读的速度是110000次/s，写的速度为81000次/s。 丰富的数据类型 - 支持二进制案例的 String，Lists，Hashes，Sets 及 Orderd Sets 数据类型操作。 原子 - Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 Redis应用场景 用来做缓存（ehcache/memcached）–redis的所有数据是放在内存中的（内存数据库） 可以在某些特定应用场景下替代传统数据库 – 比如社交应用 在一些大型系统，特定功能：session共享，购物车 也有比如排行榜应用，取TOP N操作。 按照用户投票和时间排序等等。 只要你有丰富的想象力，redis有无限的惊喜 推荐阅读 redis官方网站 redis中文官网","categories":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"论-JavaScript、jQuery、AJAX、JSON及四者关系","slug":"论-JavaScript、jQuery、AJAX、JSON及四者关系","date":"2018-12-13T13:50:38.939Z","updated":"2018-12-13T14:05:50.561Z","comments":true,"path":"2018/12/13/论-JavaScript、jQuery、AJAX、JSON及四者关系/","link":"","permalink":"http://yoursite.com/2018/12/13/论-JavaScript、jQuery、AJAX、JSON及四者关系/","excerpt":"在学习前端的过程中，经常被各种各样的语法名词搞混，这里简单归纳下容易混淆的四种名词含义，JavaScript、jQuery、AJAX、JSON 以及这四者之间的关系。 JavaScriptJavaScript（简称js）是一种主要运行于浏览器中的弱类型的动态脚本语言，可以用来实现网页上的一些高级功能，如数据验证处理、页面动态效果、定时任务、与用户交互、发送/接收服务器端数据等等。 弱类型指的是js中的变量在参与运算的时候可以根据实际需要动态转换类型。与之相对应的是强类型语言——变量一般不允许自动转换类型（某些强类型语言的字符串连接操作除外），如果参与运算、调用时不符合要求的类型，则会在编译阶段报错，比如说java各种复杂的变量声明。","text":"在学习前端的过程中，经常被各种各样的语法名词搞混，这里简单归纳下容易混淆的四种名词含义，JavaScript、jQuery、AJAX、JSON 以及这四者之间的关系。 JavaScriptJavaScript（简称js）是一种主要运行于浏览器中的弱类型的动态脚本语言，可以用来实现网页上的一些高级功能，如数据验证处理、页面动态效果、定时任务、与用户交互、发送/接收服务器端数据等等。 弱类型指的是js中的变量在参与运算的时候可以根据实际需要动态转换类型。与之相对应的是强类型语言——变量一般不允许自动转换类型（某些强类型语言的字符串连接操作除外），如果参与运算、调用时不符合要求的类型，则会在编译阶段报错，比如说java各种复杂的变量声明。而因为JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。对于传统编程来说，则是会在执行前对所有代码进行编译。又因为他弱语言的特性，经常见到var出一切变量！ 简单的js示例： 1234567891011&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=\"text/javascript\"&gt;&#123; document.write(\"&lt;h1&gt;这是标题&lt;/h1&gt;\"); document.write(\"&lt;p&gt;Hello word！&lt;/p&gt;\"); document.write(\"&lt;p&gt;这是另一个段落。&lt;/p&gt;\"); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; jQueryjQuery是js的一个工具库，由John Resig在2006年发布。意思就是基于js的一种实用工具。在jQuery出现之前，在js程序中获取元素节点比较麻烦，例如： 1document.getElementById('id') 之后John Resig根据css选择器编写了jQuery选择器，并对选择器的规则进行了扩充，从而让元素查找变得非常方便。 1$('#id') 除此之外还有链式操作 123$('div.con') .height(100) .show(); 这种连续调用可以让代码书写更加简洁，也印证了jQuery自己的口号：write less, do more 此外，jQuery还提供了浏览器兼容、样式读写、事件绑定与执行、动画等特性，后来又加入了ajax、promise等，再加上方便的插件编写机制，对整个js的生态圈产生了重大的影响，可以说是js历史上影响力最大的一个库。 AJAXajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需刷新页面、使用js与服务器进行交互的一种技术。 有时候会有这样一种需求：只希望更改页面上的一个区域。然而在从前的技术框架内只能刷新整个页面，带来的后果是：①需要重新传输整个页面，服务器端与客户端的流量消耗都会比较大；②如果是动态页，服务器端需要重新生成整个页面，即使是那些客户原本不想要刷新的区域，增大了服务器的负担。 ajax的基本流程可以概括为：页面上js脚本实例化一个XMLHttpRequest对象，设置好服务器端的url、必要的查询参数、回调函数之后，向服务器发出请求，服务器在处理请求之后将处理结果返回给页面，触发事先绑定的回调函数。这样，页面脚本如果想要改变一个区域的内容，只需要通过ajax向服务器获取与该区域有关的少量数据，在回调函数中将该区域的内容替换掉即可，不需要刷新整个页面。 XMLHttpRequest在发送请求的时候，有两种方式：同步与异步。这里就不细谈了。 简单的示例： 12345678910$.ajax(&#123; url:'/user/ajaxshow', //规定发送请求的 URL。默认是当前页面。 method:'GET', //与type一模一样，只是type对于目前jQuery的版本全部兼容，method在jQuery1.9以后的版本 contentType:'application/json', //发送数据到服务器时所使用的内容类型。 dataType:'json', //预期的服务器响应的数据类型。 success:function (data) &#123; /**在此进行数据处理*/ alert(data); &#125; &#125; JSONJSON全称JavaScript Object Notation（js对象标记法），由Douglas Crockford在2002年发现并制定了标准。JSON是基于JavaScript的，是JavaScript的一个子集。JSON是用JavaScript语法来表示数据的一种轻量级语言。 从ajax的命名中我们就可以看到，数据交换是通过XML格式进行的。在ajax刚出现的时候，绝大多数应用都是采用XML格式，也有少数使用纯文本的。但是XML格式有一个缺点，就是文档构造复杂，需要传输比较多的字节数。在这种情况下，JSON的轻便性逐渐得到重视，后来替代XML成为ajax最主要的数据传输格式。可以举个简单的例子比较一下： 1234567891011&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;root&gt; &lt;article&gt; &lt;title&gt;Article Title1&lt;/title&gt; &lt;content&gt;content1&lt;/content&gt; &lt;/article&gt; &lt;article&gt; &lt;title&gt;Article Title2&lt;/title&gt; &lt;content&gt;content2&lt;/content&gt; &lt;/article&gt;&lt;/root&gt; 123456789101112&#123; \"article\" : [ &#123; \"title\": \"Article Title1\", \"content\": \"content1\" &#125;, &#123; \"title\": \"Article Title2\", \"content\": \"content2\" &#125; ]&#125; 说到js自身，对于对象构造有两种方法：基于对象的完整写法，字面量表示法。前者如： 123var obj = new Object();obj.title = \"title1\";obj.content = \"content1\"; 而与之对应的字面量表示法则写为： 1234var obj = &#123; title: \"title1\", content: \"content1\"&#125;; 可以明显看出字面量表示法要简洁得多。而JSON基本就是字面量表示法的一个子集，除了强制要求键与字符串类型的值必须用双引号包起之外，它剔除了undefined、function等类型，也不包括浏览器内置对象类型（如Date、RegExp等），是基于文本的、比较纯粹的数据表示方法。 总结总结一下就是，js老大哥，jQuery是他手头最好用的工具（之一），AJAX是基于js的一门页面部分刷新技术，JSON是js部分语法的升级优化版。","categories":[{"name":"web","slug":"web","permalink":"http://yoursite.com/categories/web/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"卸载win10预装","slug":"简单完全删除所有win10预装应用","date":"2018-10-13T13:36:53.000Z","updated":"2018-12-19T14:56:08.853Z","comments":true,"path":"2018/10/13/简单完全删除所有win10预装应用/","link":"","permalink":"http://yoursite.com/2018/10/13/简单完全删除所有win10预装应用/","excerpt":"","text":"一行命令删除所有win10预装应用，解决win10烦恼！！ 方法和步骤：1、搜索栏中输入“PowerShell”，在搜索结果中右键选择“以管理员身份运行”PowerShell。2、在PowerShell窗口中，输入“Get-AppXPackage | Remove-AppxPackage”回车确认，然后等待系统自动将当前账户中的所有预装应用都删除即可。3、如果要卸载某个应用，只需输入对应命令，按下回车键即可删除。","categories":[{"name":"电脑技巧","slug":"电脑技巧","permalink":"http://yoursite.com/categories/电脑技巧/"}],"tags":[{"name":"win10","slug":"win10","permalink":"http://yoursite.com/tags/win10/"}]},{"title":"我的博客之路","slug":"我的博客之路","date":"2017-12-11T13:36:53.000Z","updated":"2018-12-19T14:44:04.327Z","comments":true,"path":"2017/12/11/我的博客之路/","link":"","permalink":"http://yoursite.com/2017/12/11/我的博客之路/","excerpt":"","text":"说到博客，仿佛已经是多少年代以前的产物了。但是对于步入互联网行业的我来说，博客似乎占用了生活中很大一部分的，刚开始入门碰到各种各样的问题，百度出来很大一部分都是各个勤劳的博客主解决了问题，这也使得我在成长的道路上遇到各种与我或者我们一起在前行的人们，尽管时过境迁，他们或为销声匿迹或者也开启了自己的博客主之路，在被评论为大神时候，回想起的是当初稚嫩的自己第一次配置好IDE的满足，第一次在教程下print出Hello Word的喜悦，或者是写出第一篇博客的忐忑，以及无人问津的失落。 说起我为什么开始写博客，当时只是因为在同学的一句话下便萌生了写博客的心思，因为我也是一个喜欢折腾的人，那时候左思右想是在CSDN写好呢还是在博客园写下第一篇历史性的Hello。最后还是想装一下的选择了hexo框架搭建的Github Page。当时hexo s看到自己博客终于显示出来得时候，内心是充满激动地，最后又花了一天零零散散的配置比如动态背景，live2d等等花里胡哨的东西，本想着与别人分享一下我成功的喜悦，但是，又想到这其实并没有什么大不了的，不是么，都没有什么内容充实，于是便就此搁浅。 为什么要写博客？这能说出好多好多的理由，但其实最让我警醒就是，当今互联网产生的碎边化阅读。时常浏览知乎的时候，我就感受到了，我看了很多很多的知识，到头来其实所剩无几，更别谈消化吸收了多少东西。博客就是一个很好的整理知识的途径，一来记录自己所学，二来记录自己所思。在其之后就是每个人不一样的小心思了，我也想成为别人口中的大V，或者是我想认识一些同样圈子的人，或者我想为简历添加重量级的一笔等等不一而足。 其实本来写博客就不会产生不良影响不是么，甚至是他还会给你带来很多的好处，可能出现的问题那其实都足以被其优点掩盖，那你还有什么理由不去写他。 解决了为什么要去写的问题，剩下来的就是怎么写了。就像刘未鹏所说的那样，让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。其实就这么简单，如果你的确在社会中，或者是在校园里，那你总是有每天学到的东西。可能是你突然冒出来的一个疑问，你可以先记录下来然后顺藤摸瓜的就能拉出来好多相关的知识，我想各行各业的翘楚们所涵盖的内容，都足以使你发表一篇论文了。 时间总会说明一切的问题，慢慢的博客他就会成为你生活里一位挚友，你向他述说你收获的喜悦，向他抒发文艺的情绪，甚至开始写起小说等等。我也祝愿每一位有意无意看到的人都能有所得，因为，这就是生活啊。 这里贴上刘未鹏的《为什么你应该（从现在开始就）写博客》http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"起点","slug":"起点","permalink":"http://yoursite.com/tags/起点/"}]},{"title":"刚开始的一小步","slug":"刚开始的一小步","date":"2017-12-10T13:36:53.000Z","updated":"2018-12-19T14:40:28.854Z","comments":true,"path":"2017/12/10/刚开始的一小步/","link":"","permalink":"http://yoursite.com/2017/12/10/刚开始的一小步/","excerpt":"","text":"如往常一样，这只是一生中一样普通的一天。 –欢迎来到博客： https://ancientlian.github.io/","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"起点","slug":"起点","permalink":"http://yoursite.com/tags/起点/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-12-10T12:36:53.000Z","updated":"2018-12-19T14:40:24.171Z","comments":true,"path":"2017/12/10/hello-world/","link":"","permalink":"http://yoursite.com/2017/12/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}